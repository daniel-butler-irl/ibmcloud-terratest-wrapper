name: Release

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the main branch
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  Semantic_Release:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          submodules: true
          persist-credentials: false
          # Clone all branches and history. This is needed for the upgrade tests
          fetch-depth: 0

      - name: Setup Node.js environment
        uses: actions/setup-node@v3.2.0

      - run: |
          npm install @semantic-release/changelog
          npm install @semantic-release/git
          npm install @semantic-release/github
          npm install @semantic-release/exec

      - name: Import GPG key
        id: import-gpg
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.RELEASE_PRIVATE_PGP }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true

      # Release
      - name: Semantic Release
        env:
          GH_TOKEN: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}
          GPG_KEY_ID: ${{ steps.import_gpg.outputs.keyid }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
#           GIT_COMMITTER_NAME: ${{ secrets.GIT_NAME }}
#           GIT_COMMITTER_EMAIL: ${{ secrets.GIT_EMAIL }}
#           GIT_EMAIL: ${{ secrets.GIT_EMAIL }}
#           GIT_USERNAME: ${{ secrets.GIT_NAME }}
          GIT_AUTHOR_NAME: ${{ steps.import-gpg.outputs.name }}
          GIT_AUTHOR_EMAIL: ${{ steps.import-gpg.outputs.email }}
          GIT_COMMITTER_NAME: ${{ steps.import-gpg.outputs.name }}
          GIT_COMMITTER_EMAIL: ${{ steps.import-gpg.outputs.email }}
        run: |
            #echo '/usr/bin/gpg2 --passphrase ${GPG_PASSPHRASE} --batch --no-tty "$@"' > /tmp/gpg-with-passphrase && chmod +x /tmp/gpg-with-passphrase
            # Configure git to use the script that passes the passphrase
            #git config gpg.program "/tmp/gpg-with-passphrase"
            # Configure git to sign the commits and tags
            #git config commit.gpgsign true
            # Configure git to use your GPG key
            #git config --global user.signingkey ${GPG_KEY_ID}
            npx semantic-release
