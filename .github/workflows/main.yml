name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  CI_PIPELINE:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container:
      image: icr.io/goldeneye_images/goldeneye-ci-image:stable

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          submodules: true
          # Clone all branches and history. This is needed for the upgrade tests
          fetch-depth: 0

#       # Check for pre-commit updates if it is a renovate PR
#       - name: Pre-commit sweeper
#         run: |
#           # Setup environment since GHA does not run the containers entrypoint
#           . /root/.bashrc
#           . /root/.profile
#           ci/pre-commit-sweeper.sh

#       # run pre-commit against all files
#       - name: Pre-commit
#         run: |
#           # Setup environment since GHA does not run the containers entrypoint
#           . /root/.bashrc
#           . /root/.profile
#           pre-commit run --all-files

#       # Run tests
#       - name: Run Tests
#         run: go test ./... -count=1 -v -timeout 5m

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.RELEASE_PRIVATE_PGP }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      # Release
      - name: Semantic Release
        if: success()
        env:
          GH_TOKEN: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          GIT_AUTHOR_NAME: ${{ secrets.GIT_NAME }}
          GIT_AUTHOR_EMAIL: ${{ secrets.GIT_EMAIL }}
          GIT_COMMITTER_NAME: ${{ secrets.GIT_NAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.GIT_EMAIL }}
        run: |
          gpg --list-secret-keys --keyid-format LONG
          cp -r /tmp/node_modules node_modules
          cp /tmp/package-lock.json package-lock.json
          npx semantic-release
