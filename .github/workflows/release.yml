name: Release

on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
#on:
#  workflow_run:
#    workflows: [CI]
#    branches: [main]
#    types:
#      - completed

jobs:
  Semantic_Release:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container:
      image: icr.io/goldeneye_images/goldeneye-ci-image:20220603-122142

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}
          submodules: true

      - name: Setup Node.js environment
        uses: actions/setup-node@v3.2.0

      - run: npm ci

      - name: Import GPG key
        id: import-gpg
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.RELEASE_PRIVATE_PGP }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: package
        run: |
          mkdir build
          cd build
          tar -czvf ${{ github.event.repository.name }}-signed.tar.gz --exclude=./*.gz --exclude=node_modules --exclude=.git --exclude=build ../. 

      - name: sign
        run: |
          # Setup environment since GHA does not run the containers entrypoint
          . /root/.bashrc
          . /root/.profile
          pwd
          ls /
          echo $${{ secrets.SIGNING_PFX }} | base64 --decode > etc/ekm/signing.pfx
          echo "signing"
          uclList=$(ucl list)
          result=$(echo $uclList | sed "s/.* Private RSA key : UID=\(.*\).*/\1/")
          certificateUID=`echo $result | cut -d' ' -f1`
          ucl export -p "${args.cisoPartitionId}" -u $certificateUID -o public.pem"
          ucl sign --hash sha256 -u $certificateUID -p "${secrets.CISO_PARTITION_ID}" -i "${{ github.event.repository.name }}-signed.tar.gz" -o "${{ github.event.repository.name }}-signed.tar.gz.sig" | tee /tmp/${baseFileName}-file-sign.log
          ls
          openssl dgst -sha256 -verify public.pem -signature "${{ github.event.repository.name }}-signed.tar.gz.sig" "${{ github.event.repository.name }}-signed.tar.gz"

      # Release
      - name: Semantic Release
        env:
          GH_TOKEN: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}
          GIT_AUTHOR_NAME: ${{ steps.import-gpg.outputs.name }}
          GIT_AUTHOR_EMAIL: ${{ steps.import-gpg.outputs.email }}
          GIT_COMMITTER_NAME: ${{ steps.import-gpg.outputs.name }}
          GIT_COMMITTER_EMAIL: ${{ steps.import-gpg.outputs.email }}
        run: |
          npx semantic-release

      - id: versionNumber
        run: echo "::set-output name=version::$SEMVER_VERSION"

      - name: Sign Tag
        env:
          SEMVER_VERSION: ${{ steps.versionNumber.outputs.version }}
        run: |
          if [ -z "$SEMVER_VERSION" ]
          then
            echo "No Release Version Set. Skip tagging"
          else
            echo "Version: $SEMVER_VERSION"
            git tag "v${SEMVER_VERSION}" "v${SEMVER_VERSION}" -f -s -m "Sign Tag"
            export GIT_COMMITTER_DATE="$(git log -1 --format=%aD v${SEMVER_VERSION})"
            git push origin "v${SEMVER_VERSION}" -f
          fi
